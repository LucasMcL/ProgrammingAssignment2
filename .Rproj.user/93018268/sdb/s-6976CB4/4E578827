{
    "contents" : "## This R file contains two functions: makeCacheMatrix and cacheSolve\n## Further descriptions are given above the respective functions\n\n\n## makeCacheMatrix takes a matrix as input and returns a list of functions\n## which are called by the cacheSolve function.\n## This function simply stores the matrix and provides the necessary\n## data to the cacheSolve function.\n\nmakeCacheMatrix <- function(x = matrix()) {\n        inv <- NULL\n        set <- function(y) {\n                x <<- y\n                inv <<- NULL\n        }\n        get <- function() x\n        setinv <- function(inverse) inv <<- inverse\n        getinv <- function() inv\n        list(set = set, get = get,\n             setinv = setinv,\n             getinv = getinv)\n}\n\n\n## This function takes as input a makeCacheMatrix object\n## Using the functions defined within makeCacheMatrix, this function\n## calculates and returns the inverse of the stored matrix value.\n## If the inverse had been previously calculated, then the cached\n## value is returned instead.\n\ncacheSolve <- function(x, ...) {\n        ## Return a matrix that is the inverse of 'x'\n        inv <- x$getinv()\n        if(!is.null(inv)) {\n                message(\"getting cached data\")\n                return(inv)\n        }\n        data <- x$get()\n        inv <- solve(data, ...)\n        x$setinv(inv)\n        inv\n}",
    "created" : 1424122069642.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3528745551",
    "id" : "4E578827",
    "lastKnownWriteTime" : 1424213462,
    "path" : "C:/Users/Lucas/DataScience/2 R Programming/Week 3/ProgrammingAssignment2/cachematrix.R",
    "project_path" : "cachematrix.R",
    "properties" : {
    },
    "source_on_save" : true,
    "type" : "r_source"
}